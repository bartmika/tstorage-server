// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tstorage_server

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TStorageClient is the client API for TStorage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TStorageClient interface {
	InsertRow(ctx context.Context, in *TimeSeriesDatum, opts ...grpc.CallOption) (*empty.Empty, error)
	InsertRows(ctx context.Context, opts ...grpc.CallOption) (TStorage_InsertRowsClient, error)
	Select(ctx context.Context, in *Filter, opts ...grpc.CallOption) (TStorage_SelectClient, error)
}

type tStorageClient struct {
	cc grpc.ClientConnInterface
}

func NewTStorageClient(cc grpc.ClientConnInterface) TStorageClient {
	return &tStorageClient{cc}
}

func (c *tStorageClient) InsertRow(ctx context.Context, in *TimeSeriesDatum, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.TStorage/InsertRow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tStorageClient) InsertRows(ctx context.Context, opts ...grpc.CallOption) (TStorage_InsertRowsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TStorage_ServiceDesc.Streams[0], "/proto.TStorage/InsertRows", opts...)
	if err != nil {
		return nil, err
	}
	x := &tStorageInsertRowsClient{stream}
	return x, nil
}

type TStorage_InsertRowsClient interface {
	Send(*TimeSeriesDatum) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type tStorageInsertRowsClient struct {
	grpc.ClientStream
}

func (x *tStorageInsertRowsClient) Send(m *TimeSeriesDatum) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tStorageInsertRowsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tStorageClient) Select(ctx context.Context, in *Filter, opts ...grpc.CallOption) (TStorage_SelectClient, error) {
	stream, err := c.cc.NewStream(ctx, &TStorage_ServiceDesc.Streams[1], "/proto.TStorage/Select", opts...)
	if err != nil {
		return nil, err
	}
	x := &tStorageSelectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TStorage_SelectClient interface {
	Recv() (*DataPoint, error)
	grpc.ClientStream
}

type tStorageSelectClient struct {
	grpc.ClientStream
}

func (x *tStorageSelectClient) Recv() (*DataPoint, error) {
	m := new(DataPoint)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TStorageServer is the server API for TStorage service.
// All implementations must embed UnimplementedTStorageServer
// for forward compatibility
type TStorageServer interface {
	InsertRow(context.Context, *TimeSeriesDatum) (*empty.Empty, error)
	InsertRows(TStorage_InsertRowsServer) error
	Select(*Filter, TStorage_SelectServer) error
	mustEmbedUnimplementedTStorageServer()
}

// UnimplementedTStorageServer must be embedded to have forward compatible implementations.
type UnimplementedTStorageServer struct {
}

func (UnimplementedTStorageServer) InsertRow(context.Context, *TimeSeriesDatum) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertRow not implemented")
}
func (UnimplementedTStorageServer) InsertRows(TStorage_InsertRowsServer) error {
	return status.Errorf(codes.Unimplemented, "method InsertRows not implemented")
}
func (UnimplementedTStorageServer) Select(*Filter, TStorage_SelectServer) error {
	return status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedTStorageServer) mustEmbedUnimplementedTStorageServer() {}

// UnsafeTStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TStorageServer will
// result in compilation errors.
type UnsafeTStorageServer interface {
	mustEmbedUnimplementedTStorageServer()
}

func RegisterTStorageServer(s grpc.ServiceRegistrar, srv TStorageServer) {
	s.RegisterService(&TStorage_ServiceDesc, srv)
}

func _TStorage_InsertRow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSeriesDatum)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TStorageServer).InsertRow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TStorage/InsertRow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TStorageServer).InsertRow(ctx, req.(*TimeSeriesDatum))
	}
	return interceptor(ctx, in, info, handler)
}

func _TStorage_InsertRows_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TStorageServer).InsertRows(&tStorageInsertRowsServer{stream})
}

type TStorage_InsertRowsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*TimeSeriesDatum, error)
	grpc.ServerStream
}

type tStorageInsertRowsServer struct {
	grpc.ServerStream
}

func (x *tStorageInsertRowsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tStorageInsertRowsServer) Recv() (*TimeSeriesDatum, error) {
	m := new(TimeSeriesDatum)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TStorage_Select_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TStorageServer).Select(m, &tStorageSelectServer{stream})
}

type TStorage_SelectServer interface {
	Send(*DataPoint) error
	grpc.ServerStream
}

type tStorageSelectServer struct {
	grpc.ServerStream
}

func (x *tStorageSelectServer) Send(m *DataPoint) error {
	return x.ServerStream.SendMsg(m)
}

// TStorage_ServiceDesc is the grpc.ServiceDesc for TStorage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TStorage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TStorage",
	HandlerType: (*TStorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertRow",
			Handler:    _TStorage_InsertRow_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InsertRows",
			Handler:       _TStorage_InsertRows_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Select",
			Handler:       _TStorage_Select_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/tstorage.proto",
}
